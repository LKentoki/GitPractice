1.let 声明用于声明可重新赋值的块级作用域局部变量，并且可以选择将其初始化为一个值。

用 let 声明的变量的作用域是最靠近并包含 let 声明的以下花括号闭合语法结构的一个：

块语句
switch 语句
try...catch 语句
let 位于其开头的 for 语句之一的主体
函数主体
类静态初始化块

2.const 声明用于声明块作用域的局部变量。常量的值不能通过使用赋值运算符重新赋值来更改，但是如果常量是一个对象，它的属性可以被添加、更新或删除。

const 声明与 let 非常相似：

const 声明的作用域既可以是块级作用域，也可以是函数作用域。
const 声明只有在声明的位置之后才能访问（参见暂时性死区）。因此，const 声明通常被视为非提升的声明方式。
当在脚本的顶层声明时，const 声明不会在 globalThis 上创建属性。
在同一作用域中，const 声明不能被任何其他声明重新声明。
const 是声明而不是语句。这意味着不能将单独的 const 声明用作块的主体（这是合理的，因为无法访问变量）。
一个常量需要一个初始值。你必须在声明同时指定它的值。（这是合理的，因为它在声明后不能被改变。）
const 声明创建了一个对值的不可变引用。它并不意味着它所持有的值是不可变的，只是变量标识符不能被重新赋值。例如，在内容是对象的情况下，这意味着对象的内容（例如属性）是可以被修改的。你应该将 const 声明理解为“创建一个身份保持不变”的标识符（变量），而不是“保持值不变的标识符”——换言之，是“创建不可变的绑定”，而不是“不可变的值”。

3.var 语句用于声明一个函数作用域或全局作用域的变量，并且可以选择将其初始化为一个值。

用 var 声明的变量的作用域是最靠近并包含 var 语句的以下花括号闭合语法结构的一个：

函数主体
类静态初始化块

var 声明，无论它们出现在脚本中的什么位置，都会在执行脚本中的任何代码之前进行处理。在代码中的任何位置声明变量都相当于在顶部声明它。这也意味着变量可以在其声明之前被使用。这种行为被称为提升，因为变量声明似乎被移动到发生该行为的函数、静态初始化块或脚本源代码的顶部。